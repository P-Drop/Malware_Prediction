import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

class Grupo6CustomClass():

    def __init__(self, df:pd.DataFrame) -> None:
        '''
        Init Class Method
        '''

        self.df = df
        self.TARGET = df.columns[-1]
        self.listaNumericas = df.select_dtypes(include=np.number).columns.tolist()
        self.listaNumericas.remove(self.TARGET)
        self.listaCategoricas = df.select_dtypes(include=['object']).columns.tolist()

    def info(self, verbose=False) -> pd.DataFrame:
        '''
        Dataframe general description
        '''

        print(f"Shape: {self.df.shape}\n")
        print("Dataframe information:\n")
        self.df.info(verbose=verbose)

        df_info = self.AnalisisNulos()
        df_info['Tipo de Variable'] = self.df.dtypes
        
        return df_info


    def AnalisisNulos(self, column:str=None) -> pd.DataFrame:
        '''
        Null values analysis
        '''

        if not column:
            df_nulos = self.df.isnull().sum().to_frame()
            df_nulos_pct = (self.df.isnull().sum() / len(self.df)).round(2).to_frame()
            df_nulos = pd.merge(left=df_nulos, right=df_nulos_pct, how='inner', left_index=True, right_index=True)
            df_nulos.columns = ['Valores Nulos', 'Porcentaje Nulos']

            return df_nulos
        
        else:
            
            print (f"El atributo '{column}' tiene {self.df[column].isna().sum()} valores nulos ({((self.df[column].isna().sum())/len(self.df)*100).round(2)}%)")
            
            return None

    def TransfLog(self, atributo:str) -> str:
        '''
        Create a new column transforming to log a numeric atribute
        '''
        if atributo in self.listaNumericas:
            atr_name=atributo+'_LOG'
            self.df[atr_name] = self.df[atributo].apply(func=np.log1p)
            self.listaNumericas = self.df.select_dtypes(include=np.number).columns.tolist()
            self.listaNumericas.remove(self.TARGET)

            return f"Atribute {atr_name} created"
        
        else:
            return f"Error -> {atributo} type is not number"
        

# Creación de función para análisis directo de variables categoricas.
# La función discrimina si el atributo a estudiar en numérico o categorico y muestra una información u otra en consecuencia.
    
    def AnalisisAtributo(self, atributo:str, log=False):
        """
        Formas de invocar esta función:
        AnalisisAtributo(atributo=dataframe.columns[indice], log=1/0)

        Reutilizamos las sigueitnes funciones:
            >> AnalisisCategoricas: Estudio completo de variables categóricas
            >> AnalisisNumericas: Estudio completo de variables numéricas
        """
        
        if atributo in self.listaCategoricas:
            return (self.AnalisisCategoricas(atributo=atributo))
        else:
            return(self.AnalisisNumericas(atributo,log))


# Creación de función para análisis directo de variables categoricas.
    
    def AnalisisCategoricas(self, atributo:str) -> pd.DataFrame:
        """
        Formas de invocar esta función:
        AnalisisCategoricas(atributo=dataframe.columns[indice])

        Reutilizamos las sigueitnes funciones:
            >> AnalisiNulos: Nos da información sobre los nulos del atributo a estudiar (# nulos y % nulos)
            >> PlotsCategoricos: Crea 4 plots para el estudio del atributo indicado.
            >> EstudioCategoricas: Crea un dataframe mostrando la distribución de valores únicos del atributo
        """

        print('Atributo Categórico')
        self.AnalisisNulos(column=atributo)
        print('\nDescripción estadística:', self.df[atributo].describe(),sep='\n\n')
        self.PlotsCategoricas(atributo)

        return (self.EstudioCategoricas(atributo=atributo))     
    
# Creación de función para estudio estadísitco de variables categoricas.
    
    def EstudioCategoricas(self, atributo:str) -> pd.DataFrame:
        '''
        Formas de invocar esta función:
        EstudioCategoricas(atributo=dataframe.columns[indice])
        '''
        equipos_infectados = self.df.groupby(atributo, dropna = False).agg(
            Equipos = (self.TARGET, len),
            Infectados = (self.TARGET, 'sum'),
            Proporcion_Infectados = (self.TARGET, 'mean')
        ).sort_values(by='Equipos', ascending=False)

        equipos_infectados['Proporcion_Equipos'] = round(equipos_infectados['Equipos'] / equipos_infectados['Equipos'].sum()*100,2)
        equipos_infectados['Proporcion_Infectados'] = round(equipos_infectados['Proporcion_Infectados']*100, 2)
        equipos_infectados = equipos_infectados[['Equipos', 'Proporcion_Equipos', 'Infectados', 'Proporcion_Infectados']]

        return (equipos_infectados)

#Creamos función para realizar 4 plots que nos proporcionen información sobre el atributo Categórico a estudiar.

    def PlotsCategoricas(self, atributo:str) -> None:
        """
        Formas de invocar esta función:
        PlotsCategoricos(atributo=dataframe.columns[indice])
        """

        fig =plt.figure(figsize=(20,10))
        ax1, ax2 = fig.subplots(2,1)
        sns.countplot(ax=ax1, data=self.df, x=atributo, hue=self.TARGET);
        sns.histplot(ax=ax2, data=self.df, x=atributo, hue=self.TARGET, stat='percent', element='step');
        plt.show()

        return None
    
# Creación de función para análisis directo de variables numericas.

    def AnalisisNumericas(self, atributo:str, log:bool=False) -> None:
        """
        Formas de invocar esta función:
        AnalisisNumericas(atributo=dataframe.columns[indice],log=1/0)

        Reutilizamos las sigueitnes funciones:
            >> AnalisiNulos: Nos da información sobre los nulos del atributo a estudiar (# nulos y % nulos)
            >> TransfLog: Si se indica como parametro (1/True), convierte a LOG el atributo a estudiar
            >> PlotsNumericos: Crea 4 plots para el estudio del atributo indicado.
        """
        print('Atributo Numérico')
        if log:
            self.TransfLog(atributo=atributo)
            atributo = '_'.join([atributo, 'LOG'])
            
        self.AnalisisNulos(column = atributo)
        print('\nDescripción estadístiica:', self.df[atributo].describe(),sep='\n\n')
        self.PlotsNumericos(atributo)

        return None

#creamos función para realizar 4 plots que nos proporcionen información sobre el atributo numérico a estudiar.

    def PlotsNumericos(self, atributo:str) -> None:
        """
        Formas de invocar esta función:
        PlotsNumericos(df=dataframe,atributo=dataframe.columns[indice])
        """
        
        fig =plt.figure(figsize=(20,10))
        ax1 ,ax2 = fig.subplots(2,2)
        sns.boxplot(ax=ax1[0], data=self.df, x=self.TARGET, hue=self.TARGET, y=atributo);
        sns.violinplot(ax=ax1[1], data=self.df, x=self.TARGET, hue=self.TARGET, y=atributo);
        sns.histplot(ax=ax2[0], data=self.df, x=atributo, hue=self.TARGET );
        sns.boxenplot(ax=ax2[1], data=self.df, x=self.TARGET, hue=self.TARGET, y=atributo);
        sns.color_palette("Paired")
        plt.show()

        return None
