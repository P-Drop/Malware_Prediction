import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

TARGET='definir_Target'
#####################################################################################################################################################
# Creación de función para obtener detalle de nulos de un dataset o un atributo de este
"""Formas de invocar esta función:
AnalisisNulos(df=dataframe,column=dataframe.columns[indice])
"""
def AnalisisNulos(df,column:str=None):    
    if not column:
        for col in df.columns:
            n_nulos=df[col].isna().sum()
            p_nulos =(n_nulos/len(df)*100).round(2)
            print (f"El atributo '{col}' tiene {n_nulos} valores nulos ({p_nulos}%)")
    else:
        print (f"El atributo '{column}' tiene {df[column].isna().sum()} valores nulos ({((df[column].isna().sum())/len(df)*100).round(2)}%)")

    return
#####################################################################################################################################################
#####################################################################################################################################################
# creamos función para hacer la conversion logarítmica del atributo a estudiar
"""Formas de invocar esta función:
TransfLog(df=dataframe,atributo=dataframe.columns[indice])
"""
def TransfLog(df, atributo:str):
    atr_name=atributo+'_LOG'
    df[atr_name]=df[atributo].apply(np.log1p)

    return df, atr_name
#####################################################################################################################################################
#####################################################################################################################################################
#creamos función para realizar 4 plots que nos proporcionen información sobre el atributo numérico a estudiar.
"""Formas de invocar esta función:
PlotsNumericos(df=dataframe,atributo=dataframe.columns[indice])
"""

def PlotsNumericos(df, atributo:str, tar=TARGET):
    fig =plt.figure(figsize=(20,10))
    ax1,ax2=fig.subplots(2,2)
    sns.boxplot(ax=ax1[0], data=df, x=tar, hue=tar, y=atributo);
    sns.violinplot(ax=ax1[1], data=df, x=tar, hue=tar, y=atributo);
    sns.histplot(ax=ax2[0], data=df, x=atributo, hue=tar );
    sns.boxenplot(ax=ax2[1], data=df, x=tar,hue=tar, y=atributo);
    sns.color_palette("Paired")
    plt.show()

    return
#####################################################################################################################################################
#####################################################################################################################################################
#creamos función para realizar 4 plots que nos proporcionen información sobre el atributo Categórico a estudiar.
"""Formas de invocar esta función:
PlotsCategoricos(df=dataframe,atributo=dataframe.columns[indice])
"""

def PlotsCategoricos(df, atributo:str, tar=TARGET): 
    fig =plt.figure(figsize=(20,10))
    ax1,ax2=fig.subplots(2,1)
    sns.countplot(ax=ax1, data=df, x=atributo, hue=tar);
    sns.histplot(ax=ax2, data=df, x=atributo, hue=tar,stat='percent',element='step');
    plt.show()

    return
#####################################################################################################################################################
#####################################################################################################################################################
# Creación de función para análisis directo de variables numericas.
"""
Formas de invocar esta función:
AnalisisNumericas(df=dataframe,atributo=dataframe.columns[indice],log=1/0)

Reutilizamos las sigueitnes funciones:
    >> AnalisiNulos: Nos da información sobre los nulos del atributo a estudiar (# nulos y % nulos)
    >> TransfLog: Si se indica como parametro (1/True), convierte a LOG el atributo a estudiar
    >> PlotsNumericos: Crea 4 plots para el estudio del atributo indicado.
"""
def AnalisisNumericas(df, atributo:str, log:bool=False, tar=TARGET):
    print('Atributo Numérico')
    if log:
        df,atributo=TransfLog(df,atributo)
        
    AnalisisNulos(df,atributo)
    print('\nDescripción estadístiica:', df[atributo].describe(),sep='\n\n')
    PlotsNumericos(df,atributo)
    return

# Creación de función para estudio estadísitco de variables categoricass.
"""Formas de invocar esta función:
EstudioCategoricas(df=dataframe,atributo=dataframe.columns[indice])
"""
#####################################################################################################################################################
#####################################################################################################################################################
def EstudioCategoricas(df, atributo:str, tar=TARGET):
    equipos_infectados = df.groupby(atributo, dropna = False).agg(
        Equipos = (tar, len),
        Infectados = (tar, 'sum'),
        Proporcion_Infectados = (tar, 'mean')
    ).sort_values(by='Equipos', ascending=False)

    equipos_infectados['Proporcion_Equipos'] = round(equipos_infectados['Equipos'] / equipos_infectados['Equipos'].sum()*100,2)
    equipos_infectados['Proporcion_Infectados'] = round(equipos_infectados['Proporcion_Infectados']*100, 2)
    equipos_infectados = equipos_infectados[['Equipos', 'Proporcion_Equipos', 'Infectados', 'Proporcion_Infectados']]

    return (equipos_infectados)
#####################################################################################################################################################
#####################################################################################################################################################
# Creación de función para análisis directo de variables categoricas.
"""
Formas de invocar esta función:
AnalisisCategoricas(df=dataframe,atributo=dataframe.columns[indice])

Reutilizamos las sigueitnes funciones:
    >> AnalisiNulos: Nos da información sobre los nulos del atributo a estudiar (# nulos y % nulos)
    >> PlotsCategoricos: Crea 4 plots para el estudio del atributo indicado.
    >> EstudioCategoricas: Crea un dataframe mostrando la distribución de valores únicos del atributo
"""
def AnalisisCategoricas(df, atributo:str, tar=TARGET):
    print('Atributo Categórico')
    AnalisisNulos(df, atributo)
    print('\nDescripción estadístiica:', df[atributo].describe(),sep='\n\n')
    PlotsCategoricos(df,atributo)

    return (EstudioCategoricas(df,atributo))
#####################################################################################################################################################
#####################################################################################################################################################
# Creación de función para análisis directo de variables categoricas.
# La función discrimina si el atributo a estudiar en numérico o categorico y 
# muestra una información u otra en consecuencia.
"""
Formas de invocar esta función:
AnalisisAtributo(df=dataframe,atributo=dataframe.columns[indice], log=1/0)

Reutilizamos las sigueitnes funciones:
    >> AnalisisCategoricas: Estudio completo de variables categóricas
    >> AnalisisNumericas: Estudio completo de variables numéricas
    
"""
def AnalisisAtributo(df,atributo:str,tar=TARGET,log=False):
    if df[atributo].dtype.kind=='O':
        return(AnalisisCategoricas(df,atributo,tar))
    else:
        return(AnalisisNumericas(df,atributo,log,tar))